Description: >
    Hisham Magdy / Deploy a high-availability web app using CloudFormation

Parameters:

  EnvironmentName:
    Description: An Environment name that will be prefixed to resources
    Type: String

  BucketName:
    Type: String
    Description: Bucket Name
    Default: udacitycloudformationbucket

Resources:

  #S3 Bucket Role + IAM User
  RootRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: 'root'
          PolicyDocument:
            Statement:
              - Effect: 'Allow'
                Action: '*'
                Resource: '*'


  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Description: Bucket on which we will attach and test bucket policy
    Properties:
      BucketName: !Ref BucketName

  # S3BucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !Ref S3Bucket
  #     PolicyDocument:
  #       Statement:
  #         Action:
  #           - "s3:GetObject"
  #           - "s3:GetObjectVersion"
  #         Effect: Allow
  #         Resource:
  #           - !Sub arn:aws:s3:::${S3Bucket}
  #           - !Sub arn:aws:s3:::${S3Bucket}/*
  #         Principal:
  #           AWS:
  #             - '*'
  
  # S3ReadOnlyEC2Role:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Statement:
  #       - Effect: Allow
  #         Principal:
  #           Service:
  #           - ec2.amazonaws.com
  #         Action:
  #         - sts:AssumeRole
  #     Path: "/"

  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - Ref: RootRole
  
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
        - Ref: LoadBalancerSecurityGroup

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"

  
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our web app hosts and ssh only from local
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
  
  WebServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          mv /var/www/html/index.html /var/www/html/index_old.html
          echo "Udacity Demo Web Server Up and Working well!" > index.html
      ImageId: ami-052efd3df9dad4825 #The image must be suitable to the region
      SecurityGroups:
      - Ref: WebServerSecurityGroup
      InstanceType: t3.small
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'

  WebServerGroup: 
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      VPCZoneIdentifier:
      - Fn::ImportValue:
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName: 
        Ref: WebServerLaunchConfig
      MinSize: "4"
      MaxSize: "4"
      TargetGroupARNs:
      - Ref: WebServerTargetGroup    

  # Evaluate machines healthy checks
  WebServerTargetGroup: 
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"    

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      -   Type: forward
          TargetGroupArn: 
              Ref: WebServerTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  ApplicationLoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      -   Type: forward
          TargetGroupArn: !Ref WebServerTargetGroup
      Conditions:
      -   Field: path-pattern
          Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1

Outputs:
  LoadBalancerURL:
    Description: The public url to load balancer
    Value: !Join [ "", ["http://" , !GetAtt LoadBalancer.DNSName ]]
